{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoApp/TodoApp.js","components/TodoFooter/TodoFooter.js","App.js","index.js"],"names":["TodoItem","props","todo","deleteTodo","handleCompleted","enterEditingMode","handleChangingEditing","title","id","completed","className","onChange","type","checked","onDoubleClick","onClick","onSubmit","event","preventDefault","value","target","TodoList","todos","map","key","cx","editing","edit","TodoApp","state","uuidv4","handleSubmit","addTodo","setState","handleInput","replace","this","placeholder","React","Component","TodoFooter","clearCompleted","handleCompletedFilter","handleActiveFilter","handleAll","filter","length","every","App","visibleTodos","isCompleted","prevState","todoEach","handleAllCompleted","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5e72cf3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = (props) => {\n  const {\n    todo,\n    deleteTodo,\n    handleCompleted,\n    enterEditingMode,\n    handleChangingEditing,\n  } = props;\n  const { title, id, completed } = todo;\n\n  const handleSubmitEdit = (event) => {\n    event.preventDefault();\n    if (title !== '') {\n      enterEditingMode(id);\n    }\n  };\n\n  const handleInputEdit = ({ target }) => {\n    const { value } = target;\n\n    handleChangingEditing(id, value);\n  };\n\n  return (\n    <>\n      <div className=\"view\">\n        <input\n          onChange={() => handleCompleted(id)}\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={`todo-${id}`}\n          checked={completed}\n        />\n        <label onDoubleClick={() => enterEditingMode(id)}>{title}</label>\n        <button\n          onClick={() => deleteTodo(id)}\n          type=\"button\"\n          className=\"destroy\"\n        />\n      </div>\n      <form onSubmit={handleSubmitEdit}>\n        <input\n          onChange={handleInputEdit}\n          value={title}\n          type=\"text\"\n          className=\"edit\"\n        />\n      </form>\n    </>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    completed: PropTypes.bool,\n    title: PropTypes.string,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  handleCompleted: PropTypes.func.isRequired,\n  enterEditingMode: PropTypes.func.isRequired,\n  handleChangingEditing: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    deleteTodo,\n    handleCompleted,\n    enterEditingMode,\n    handleChangingEditing,\n  } = props;\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <li\n          key={todo.id}\n          className={cx({\n            completed: todo.completed,\n            editing: todo.edit,\n          })}\n        >\n\n          <TodoItem\n            todo={todo}\n            deleteTodo={deleteTodo}\n            handleCompleted={handleCompleted}\n            enterEditingMode={enterEditingMode}\n            handleChangingEditing={handleChangingEditing}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    completed: PropTypes.bool,\n    title: PropTypes.string,\n  })).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  handleCompleted: PropTypes.func.isRequired,\n  enterEditingMode: PropTypes.func.isRequired,\n  handleChangingEditing: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class TodoApp extends React.Component {\n  state = {\n    title: '',\n    id: uuidv4(),\n    completed: false,\n    edit: false,\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n    const { addTodo } = this.props;\n\n    if (title) {\n      addTodo(this.state);\n    }\n\n    this.setState({\n      title: '',\n      id: uuidv4(),\n    });\n  };\n\n  handleInput = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      title: value.replace(/\\s/g, ''),\n    });\n  };\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          onChange={this.handleInput}\n          value={title}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoFooter = (props) => {\n  const {\n    todos,\n    clearCompleted,\n    handleCompletedFilter,\n    handleActiveFilter,\n    handleAll,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${todos.filter(todo => !todo.completed)\n          .length} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <button\n            type=\"button\"\n            onClick={handleAll}\n            className=\"buttonFooter\"\n          >\n            All\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            onClick={handleActiveFilter}\n            className=\"buttonFooter\"\n          >\n            Active\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            onClick={handleCompletedFilter}\n            className=\"buttonFooter\"\n          >\n            Completed\n          </button>\n        </li>\n      </ul>\n\n      <button\n        onClick={clearCompleted}\n        type=\"button\"\n        className={cx('clear-completed', { 'hidden-but': todos\n          .every(todo => todo.completed === false) })}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodoFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    completed: PropTypes.bool,\n    title: PropTypes.string,\n  })).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  handleCompletedFilter: PropTypes.func.isRequired,\n  handleActiveFilter: PropTypes.func.isRequired,\n  handleAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoFooter } from './components/TodoFooter';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    visibleTodos: [],\n    isCompleted: false,\n  };\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        todo,\n      ].filter(todoEach => todoEach.title !== ''),\n      visibleTodos: [\n        ...prevState.visibleTodos,\n        todo,\n      ].filter(todoEach => todoEach.title !== ''),\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n      visibleTodos: prevState.visibleTodos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.completed === false),\n      visibleTodos: prevState.visibleTodos\n        .filter(todo => todo.completed === false),\n    }));\n  };\n\n  handleCompleted = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n      visibleTodos: prevState.visibleTodos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  };\n\n  enterEditingMode = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            edit: !todo.edit,\n          };\n        }\n\n        return todo;\n      }),\n      visibleTodos: prevState.visibleTodos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            edit: !todo.edit,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  };\n\n  handleChangingEditing = (id, value) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: value.replace(/\\s/g, ''),\n          };\n        }\n\n        return todo;\n      }),\n\n      visibleTodos: prevState.visibleTodos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: value.replace(/\\s/g, ''),\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  };\n\n  handleAllCompleted = () => {\n    this.setState((prevState) => {\n      if (prevState.isCompleted === false) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: true,\n          })),\n          visibleTodos: prevState.visibleTodos.map(todo => ({\n            ...todo,\n            completed: true,\n          })),\n          isCompleted: !prevState.isCompleted,\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: false,\n        })),\n        visibleTodos: prevState.visibleTodos.map(todo => ({\n          ...todo,\n          completed: false,\n        })),\n        isCompleted: !prevState.isCompleted,\n      };\n    });\n  };\n\n  handleCompletedFilter = () => {\n    this.setState(prevState => ({\n      visibleTodos: prevState.todos.filter(todo => todo.completed),\n    }));\n  };\n\n  handleActiveFilter = () => {\n    this.setState(prevState => ({\n      visibleTodos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  handleAll = () => {\n    this.setState(prevState => ({\n      visibleTodos: prevState.todos,\n    }));\n  };\n\n  render() {\n    const { visibleTodos } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <TodoApp addTodo={this.addTodo} />\n\n        </header>\n\n        <section className=\"main\">\n          <input\n            onClick={this.handleAllCompleted}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            todos={visibleTodos}\n            deleteTodo={this.deleteTodo}\n            handleCompleted={this.handleCompleted}\n            enterEditingMode={this.enterEditingMode}\n            handleChangingEditing={this.handleChangingEditing}\n          />\n        </section>\n        {visibleTodos.length\n          ? (\n            <TodoFooter\n              todos={visibleTodos}\n              clearCompleted={this.clearCompleted}\n              handleCompletedFilter={this.handleCompletedFilter}\n              handleActiveFilter={this.handleActiveFilter}\n              handleAll={this.handleAll}\n            />\n          )\n          : (<></>)\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}